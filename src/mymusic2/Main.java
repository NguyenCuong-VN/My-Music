package mymusic2;

import java.awt.Color;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import mymusic2.Controller.AddPlaylist;
import mymusic2.Controller.DeleteData;
import mymusic2.Controller.SearchSong;
import mymusic2.Controller.Url;
import mymusic2.Controller.UserController;
import mymusic2.Controller.ViewTableModel;
import mymusic2.Model.MP3;
import mymusic2.Model.User;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Cuong
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameSelection = new javax.swing.JPanel();
        nameSelectionLabel = new javax.swing.JLabel();
        genaralPanel = new javax.swing.JPanel();
        nameApp = new javax.swing.JLabel();
        accountName = new javax.swing.JLabel();
        changePassButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        newButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        allSongLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        myPlaylistLabel = new javax.swing.JLabel();
        singerLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        playLabel = new javax.swing.JLabel();
        nameSongLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("My Music");
        setResizable(false);

        nameSelection.setBackground(new java.awt.Color(0, 204, 153));

        nameSelectionLabel.setFont(new java.awt.Font("Arial", 1, 32)); // NOI18N
        nameSelectionLabel.setForeground(new java.awt.Color(204, 255, 255));
        nameSelectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameSelectionLabel.setText("All Song");

        javax.swing.GroupLayout nameSelectionLayout = new javax.swing.GroupLayout(nameSelection);
        nameSelection.setLayout(nameSelectionLayout);
        nameSelectionLayout.setHorizontalGroup(
            nameSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nameSelectionLayout.createSequentialGroup()
                .addGap(245, 245, 245)
                .addComponent(nameSelectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        nameSelectionLayout.setVerticalGroup(
            nameSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nameSelectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        genaralPanel.setBackground(new java.awt.Color(0, 102, 102));

        nameApp.setBackground(new java.awt.Color(0, 102, 102));
        nameApp.setFont(new java.awt.Font("Bookman Old Style", 1, 36)); // NOI18N
        nameApp.setForeground(new java.awt.Color(0, 204, 204));
        nameApp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameApp.setText("MY MUSIC");
        nameApp.setOpaque(true);

        accountName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        accountName.setForeground(new java.awt.Color(0, 204, 102));
        accountName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        accountName.setText("ten account");
        accountName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountNameMouseClicked(evt);
            }
        });

        changePassButton.setBackground(new java.awt.Color(0, 102, 102));
        changePassButton.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        changePassButton.setText("Change Password");
        changePassButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changePassButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout genaralPanelLayout = new javax.swing.GroupLayout(genaralPanel);
        genaralPanel.setLayout(genaralPanelLayout);
        genaralPanelLayout.setHorizontalGroup(
            genaralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genaralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameApp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(accountName, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(changePassButton)
                .addContainerGap())
        );
        genaralPanelLayout.setVerticalGroup(
            genaralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, genaralPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(genaralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameApp, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accountName)
                    .addComponent(changePassButton)))
        );

        searchTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchTextField.setText("Searching...");
        searchTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchTextFieldMouseClicked(evt);
            }
        });

        newButton.setText("New");
        newButton.setEnabled(false);
        newButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newButtonMouseClicked(evt);
            }
        });

        dataTable.setBackground(new java.awt.Color(204, 204, 204));
        dataTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        dataTable.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        dataTable.setForeground(new java.awt.Color(0, 153, 51));
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        dataTable.setRowHeight(22);
        dataTable.setShowVerticalLines(false);
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTableMouseClicked(evt);
            }
        });
        dataTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dataTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(dataTable);

        allSongLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        allSongLabel.setForeground(new java.awt.Color(0, 153, 153));
        allSongLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        allSongLabel.setText("All Song");
        allSongLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allSongLabelMouseClicked(evt);
            }
        });

        categoryLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        categoryLabel.setForeground(new java.awt.Color(0, 153, 153));
        categoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        categoryLabel.setText("Category");
        categoryLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoryLabelMouseClicked(evt);
            }
        });

        myPlaylistLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        myPlaylistLabel.setForeground(new java.awt.Color(0, 153, 153));
        myPlaylistLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        myPlaylistLabel.setText("My Playlist");
        myPlaylistLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myPlaylistLabelMouseClicked(evt);
            }
        });

        singerLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        singerLabel.setForeground(new java.awt.Color(0, 153, 153));
        singerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        singerLabel.setText("Singer");
        singerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                singerLabelMouseClicked(evt);
            }
        });

        authorLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        authorLabel.setForeground(new java.awt.Color(0, 153, 153));
        authorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        authorLabel.setText("Author");
        authorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                authorLabelMouseClicked(evt);
            }
        });

        userLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        userLabel.setForeground(new java.awt.Color(0, 153, 153));
        userLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userLabel.setText("User");
        userLabel.setEnabled(false);
        userLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userLabelMouseClicked(evt);
            }
        });

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        searchButton.setText("ok");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });

        playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/pause.png"))); // NOI18N
        playLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playLabelMouseClicked(evt);
            }
        });

        nameSongLabel.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        nameSongLabel.setForeground(new java.awt.Color(0, 102, 153));
        nameSongLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nameSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(genaralPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(allSongLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(categoryLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(myPlaylistLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                    .addComponent(singerLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(authorLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(805, 805, 805)
                            .addComponent(jLabel1))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameSongLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(jLabel3)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(playLabel)
                .addGap(412, 412, 412))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(genaralPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(newButton)
                        .addComponent(deleteButton)
                        .addComponent(addButton))
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(nameSongLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(256, 256, 256)
                            .addComponent(jLabel3)
                            .addGap(432, 432, 432)
                            .addComponent(jLabel1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(allSongLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51)
                            .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51)
                            .addComponent(myPlaylistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51)
                            .addComponent(singerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51)
                            .addComponent(authorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51)
                            .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void accountNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountNameMouseClicked
        if(mp != null){
            mp.stop();
        }
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_accountNameMouseClicked

    private void searchTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTextFieldMouseClicked
        searchTextField.setText("");
    }//GEN-LAST:event_searchTextFieldMouseClicked

    private void newButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newButtonMouseClicked
        if(nameSelectionLabel.getText().equals("My Playlist")){
            new newMylist(user).setVisible(true);
        } 
        else if(user.getIsVip()){
            switch (nameSelectionLabel.getText()) {
                case "All Song":     
                    new NewSong().setVisible(true);
                    break;
                case "Category":
                    new NewCategory().setVisible(true);
                    break;
                case "Singer":
                    new NewSinger().setVisible(true);
                    break;
                case "Author":
                    new NewAuthor().setVisible(true);
                    break;
                default:
                    break;
            }
        }    
    }//GEN-LAST:event_newButtonMouseClicked

    private void allSongLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allSongLabelMouseClicked
        before_cross=false;
        cross=false;
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        addButton.setEnabled(false);
        
        model=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }   
        };
        dataTable.setModel(model);
        
        try {
            ViewTableModel.allSongTableModel(model);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        nameSelectionLabel.setText(allSongLabel.getText());
        if(user.getIsVip()){
            newButton.setEnabled(true);
        }

    }//GEN-LAST:event_allSongLabelMouseClicked

    private void categoryLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoryLabelMouseClicked
        before_cross=false;
        cross= false;
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        addButton.setEnabled(false);
        
        model=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }   
        };
        dataTable.setModel(model);
        
        try {
            ViewTableModel.categoryTableModel(model);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        nameSelectionLabel.setText(categoryLabel.getText());
        if(user.getIsVip()){
            newButton.setEnabled(true);
        }
    }//GEN-LAST:event_categoryLabelMouseClicked

    private void myPlaylistLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPlaylistLabelMouseClicked
        cross=false;
        before_cross= true;
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        addButton.setEnabled(false);
        
        model=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }   
        };
        dataTable.setModel(model);
        
        try {
            ViewTableModel.myPlaylistTableModel(model, user);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        nameSelectionLabel.setText(myPlaylistLabel.getText());
        newButton.setEnabled(true);
    }//GEN-LAST:event_myPlaylistLabelMouseClicked

    private void singerLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_singerLabelMouseClicked
        before_cross=false;
        cross= false;
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        addButton.setEnabled(false);
        
        model=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }   
        };
        dataTable.setModel(model);
        
        try {
            ViewTableModel.singerTableModel(model);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        nameSelectionLabel.setText(singerLabel.getText());
        if(user.getIsVip()){
            newButton.setEnabled(true);
        }
    }//GEN-LAST:event_singerLabelMouseClicked

    private void authorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_authorLabelMouseClicked
        before_cross=false;
        cross= false;
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        addButton.setEnabled(false);
        
        model=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }   
        };
        dataTable.setModel(model);
        
        try {
            ViewTableModel.authorTableModel(model);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        nameSelectionLabel.setText(authorLabel.getText());
        if(user.getIsVip()){
            newButton.setEnabled(true);
        }
    }//GEN-LAST:event_authorLabelMouseClicked

    private void userLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userLabelMouseClicked
        before_cross=false;
        cross= false;
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        addButton.setEnabled(false);
        
        if(user.getIsVip()){
            model=new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }   
            };
            dataTable.setModel(model);

            try {
                ViewTableModel.userTableModel(model);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            nameSelectionLabel.setText("User");
        }
    }//GEN-LAST:event_userLabelMouseClicked

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        if(dataTable.getSelectedRow() >= 0){
            String tenBaiHat= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
            String list= JOptionPane.showInputDialog("Bạn muốn thêm vào playlist nào ?");
            try {
                if(AddPlaylist.add(tenBaiHat, list, user)) JOptionPane.showMessageDialog(this, "Ok !!");
                else JOptionPane.showMessageDialog(this, "Vui lòng kiểm tra lại thông tin");
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_addButtonMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        
        if(dataTable.getSelectedRow() >= 0){
            if(cross == true){
                String tenBaiHat= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
                try {
                    if(DeleteData.deleteSongInMyList(tenBaiHat)) JOptionPane.showMessageDialog(this, "Ok !!");
                    else JOptionPane.showMessageDialog(this, "Có lỗi xảy ra !!");
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                dataTable.updateUI();
            }
            else if(nameSelectionLabel.getText().equals("My Playlist")){
                String tenPlaylist= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
                try {
                    if(DeleteData.deleteMyPlaylist(tenPlaylist, user)) JOptionPane.showMessageDialog(this, "Ok !!");
                    else JOptionPane.showMessageDialog(this, "Có lỗi xảy ra !!");
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                dataTable.updateUI();
            }
            else if(user.getIsVip()){
                switch (nameSelectionLabel.getText()) {
                    case "All Song":    
                        String tenBaiHat= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);                       
                        try {
                            if(DeleteData.deleteSong(tenBaiHat)) JOptionPane.showMessageDialog(this, "Ok !!");
                            else JOptionPane.showMessageDialog(this, "Có lỗi xảy ra !!");
                        } catch (SQLException | ClassNotFoundException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    
                    case "Category":
                        String tenCategory= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0); 
                        try {
                            if(DeleteData.deleteCategory(tenCategory)) JOptionPane.showMessageDialog(this, "Ok !!");
                            else JOptionPane.showMessageDialog(this, "Có lỗi xảy ra !!");
                        } catch (SQLException | ClassNotFoundException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                        
                    case "Singer":
                        String tenSinger= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0); 
                        String DoBSinger= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 3); 
                        try {
                            if(DeleteData.deleteSinger(tenSinger, DoBSinger)) JOptionPane.showMessageDialog(this, "Ok !!");
                            else JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
                        } catch (SQLException | ClassNotFoundException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;

                    case "Author":
                        String tenAuthor= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0); 
                        String DoBAuthor= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 3); 
                        try {
                            if(DeleteData.deleteAuthor(tenAuthor, DoBAuthor)) JOptionPane.showMessageDialog(this, "Ok !!");
                            else JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
                        } catch (SQLException | ClassNotFoundException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                        
                    case "User":
                        boolean isVip= (boolean) dataTable.getValueAt(dataTable.getSelectedRow(), 2);
                        if(!isVip){
                            String tenDangNhap= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 1);
                            try {
                            if(DeleteData.deleteUser(tenDangNhap)) JOptionPane.showMessageDialog(this, "Ok !!");
                            else JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
                            } catch (SQLException | ClassNotFoundException ex) {
                                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        else JOptionPane.showMessageDialog(this, "Bạn không đủ quyền hạn để xóa admin !!");
                        break;
                        
                    default:
                        break;
                }
                dataTable.updateUI();
            }
        }
        else JOptionPane.showMessageDialog(this, "Vui lòng chọn bài hát muốn xóa !!");
        
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void dataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseClicked
        if(nameSelectionLabel.getText().equals("All Song") || cross == true){
            if(user.getIsVip() || before_cross == true){
                deleteButton.setEnabled(true);
            }
            addButton.setEnabled(true);
        }      
        else if(nameSelectionLabel.getText().equals("My Playlist")){
            deleteButton.setEnabled(true);
        }
        else if(nameSelectionLabel.getText().equals("Category")
                || nameSelectionLabel.getText().equals("Singer")
                || nameSelectionLabel.getText().equals("Author")
                || nameSelectionLabel.getText().equals("User")){
            if(user.getIsVip()){
                deleteButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_dataTableMouseClicked

    private void dataTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataTableKeyPressed

        if(dataTable.getSelectedRow() >= 0){ 
            switch (nameSelectionLabel.getText()) {
                case "Category":    
                    
                    newButton.setEnabled(false);
                    deleteButton.setEnabled(false);
                    addButton.setEnabled(false);
                    
                    String tenCategory= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
                    model=new DefaultTableModel(){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }   
                    };
                    dataTable.setModel(model);

                    try {
                        ViewTableModel.songCategoryTableModel(model, tenCategory);
                        nameSelectionLabel.setText(tenCategory);
                    } catch (SQLException | ClassNotFoundException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    cross= true;
                    break;

                case "Singer":
                    
                    newButton.setEnabled(false);
                    deleteButton.setEnabled(false);
                    addButton.setEnabled(false);
                    
                    String tenCaSi= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
                    model=new DefaultTableModel(){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }   
                    };
                    dataTable.setModel(model);

                    try {
                        ViewTableModel.songSingerTableModel(model, tenCaSi);
                        nameSelectionLabel.setText(tenCaSi);
                    } catch (SQLException | ClassNotFoundException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    cross= true;
                    break;

                case "Author":
                    
                    newButton.setEnabled(false);
                    deleteButton.setEnabled(false);
                    addButton.setEnabled(false);
                    
                    String tenNhacSi= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
                    model=new DefaultTableModel(){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }   
                    };
                    dataTable.setModel(model);

                    try {
                        ViewTableModel.songSingerTableModel(model, tenNhacSi);
                        nameSelectionLabel.setText(tenNhacSi);
                    } catch (SQLException | ClassNotFoundException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    cross= true;        
                    break;

                case "My Playlist":
                    
                    newButton.setEnabled(false);
                    deleteButton.setEnabled(false);
                    addButton.setEnabled(false);
                    
                    String tenPlaylist= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
                    model=new DefaultTableModel(){
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false;
                        }   
                    };
                    dataTable.setModel(model);

                    try {
                        ViewTableModel.songPlaylistTableModel(model, tenPlaylist, user);
                        nameSelectionLabel.setText(tenPlaylist);
                    } catch (SQLException | ClassNotFoundException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    cross= true;         
                    break;

                default:
                    break;
            }
        }
        
    }//GEN-LAST:event_dataTableKeyPressed

    private void changePassButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePassButtonMouseClicked
        String oldPass= JOptionPane.showInputDialog("Xác nhận password cũ:");
        try {
            if(UserController.checkPassword(user, oldPass)){
                String newPass=JOptionPane.showInputDialog("Password mới:");
                if(UserController.changePassword(user, oldPass, newPass)) JOptionPane.showMessageDialog(this, "Ok !!");
                else JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
            }
            else JOptionPane.showMessageDialog(this, "Password không chính xác");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_changePassButtonMouseClicked

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        before_cross=false;
        cross=false;
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        addButton.setEnabled(false);
        
        model=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }   
        };
        dataTable.setModel(model);
        
        try {
            SearchSong.searchSong(model, searchTextField.getText());
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchButtonMouseClicked

    private void playLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playLabelMouseClicked

        if(dataTable.getSelectedRow() >= 0){
            if(!isPlay){
                String tenBaiHat= (String) dataTable.getValueAt(dataTable.getSelectedRow(), 0); 
                String URL = null;
                try {
                    URL = Url.getUrl(tenBaiHat);
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(URL == null || URL.equals("")){
                    URL="Mp3\\"+tenBaiHat+".mp3";
                }
                mp=new MP3(URL);
                mp.play();
                playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/play.png")));
                nameSongLabel.setText(tenBaiHat);
                isPlay=true;
            }
            else{
                mp.stop();
                playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/pause.png")));
                isPlay=false;
            }     
        }
        else JOptionPane.showMessageDialog(this, "Bạn chưa chọn bài hát");
    }//GEN-LAST:event_playLabelMouseClicked

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountName;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel allSongLabel;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JButton changePassButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel genaralPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel myPlaylistLabel;
    private javax.swing.JLabel nameApp;
    private javax.swing.JPanel nameSelection;
    private javax.swing.JLabel nameSelectionLabel;
    private javax.swing.JLabel nameSongLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel playLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel singerLabel;
    private javax.swing.JLabel userLabel;
    // End of variables declaration//GEN-END:variables
    private User user;
    private boolean cross= false;
    private boolean before_cross= false;
    private MP3 mp;
    private boolean isPlay= false;
    
    DefaultTableModel model= new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }   
    };
    
    public void setUser(User user){
        this.user= user;
        setVisible(true);
        accountName.setText(user.getUname());
        
        if(this.user.getIsVip()){
            userLabel.setEnabled(true);
        }
    }
    
}
